- This is the same test implemented using the driver pattern
- Seems much more readable
- Explain sequence
  - Create a driver
  - Start a driver (initiate tested code's startup sequence)
  - Report a single weather forecast
  - Retrieve reported forecast
  - Assert that the retrieved forecast is the same as previously reported
  - Assert that a notification was sent to a wiremock about the reported forecast.
- Easier to spot that the notification assertion doesn't fit
- Why creation and start are separated?
  - e.g. driver.SetupTooShortHttpRetryTimeout()
  - e.g. driver.SetXyzFeatureFlag(x);
  - a static method can be introduced as a shortcut, e.g. StartNew()
- What is the retrievedForecast?
  - AssertObject pattern
- DisposeAsync
  - Cleans everything, similar to teardowns and Dispose in xUnit.net
  - If one Dispose fails, others are not executed.
    - two ways of dealing with this (should I tell about it?)
- GetReportedForecast, ShouldBeTheSameAsReported - buttery butter
- Two typical ways of evolution:
  - More "endpoints"" (e.g. summary translation, methods for configuration, methods for setting up data in database)
    driver.SummaryTranslationEndpointReturns(xxx);
    driver.SummaryTranslationEndpointReturnsError();
    driver.ConfigurationEndpointReturnsUserData(yyy);
    driver.ConfigurationEndpointReturnsCustomerData(yyy2);
    driver.SetupDatabaseToContainForecasts(zzz);
    driver.ClearDatabase(zzz);
    - needs more segregation
  - More data combinations, e.g.
    - forecast with temperature -100, 
    - HTTP request without a specific header
    - two distinct users report bad weather
    - needs more flexibility
  - let's first deal with "more endpoints" challenge as it's the easier one