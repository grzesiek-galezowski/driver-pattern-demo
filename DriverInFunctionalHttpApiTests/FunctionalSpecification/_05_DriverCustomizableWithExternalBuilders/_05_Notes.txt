- Test Data Builder pattern, completely external
- Let's again look at ShouldRejectForecastReportAsBadRequestWhenTemperatureIsLessThanMinus100 where we test that for temperature less than -100 and expect an error.
- The builder builds a piece of immutable data with value semantics (two objects with the same values are equal), allowing passing it around and each place that needs the data can call Build()
- The builder itself is immutable (show). I prefer immutable builders. They allow setting up "templates" with very little risk that we will corrupt some data somewhere else.
- The advantages 
  - simple (also simple nesting builder inside a builder)
  - external to the driver - lower complexity of the driver
  - ability to setup "templates" in the tests for multiple requests of the same kind
- The disadvantages 
  - Harder sharing of "happy" values between several different requests (e.g. if GetReportedForecast needed a user id, we would need to supply it from the test). This can be fixed at the cost of more abstraction, see the actor example.

In all of these examples, the id of last reported forecast was stored in the driver, leading to less flexibility (what if we want to report two forecasts and only ask about the first one?) and the IAppDriverContext interface. The next example will show this state externalized.

